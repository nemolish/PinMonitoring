# -*- coding: utf-8 -*-
import requests
from bs4 import  BeautifulSoup
import pandas as pd
# import akshare as ak
from Crypto.Cipher import AES
from Crypto.Util.Padding import pad, unpad
import re
import json
import time

# 加密函数
def aes_encrypt(text, key):
    # 创建AES cipher对象
    cipher  = AES.new(str.encode(key, 'utf-8'), AES.MODE_ECB)
    # 加密并添加padding
    padded_data = pad(str.encode(text, 'utf-8'), AES.block_size)

    encrypted = cipher.encrypt(padded_data)
    return encrypted.hex()

def get_jisilu_key():
    # 先获取登录页面获取必要token/cookie
    login_page = requests.get('https://www.jisilu.cn/account/login/')

    pattern = r"var key = '(.*?)';"
    match = re.search(pattern, login_page.text)

    if match:
        return match.group(1)
    else:
        return '397151C04723421F'
def get_jisilu_session():
    session = requests.Session()

    key = get_jisilu_key()

    login_data = {
        'user_name': aes_encrypt('159********', key),
        'password': aes_encrypt('k************.', key),
        'aes': 1,
        'auto_login': 0
    }


    response = session.post('https://www.jisilu.cn/webapi/account/login_process/', data=login_data)
    print(response.text)  # 查看登录是否成功
    return session

def get_kzz_code_from_jisilu(session):
    # 可转债列表
    list = session.get('https://www.jisilu.cn/webapi/cb/list/')
    # 退市可转债列表
    delisted = session.get('https://www.jisilu.cn/webapi/cb/delisted/')
    print(list.json)
    list_object = json.loads(list.text)
    delisted_object = json.loads(delisted.text)
    result = []
    threshold = 11 / 100.0
    for stock in list_object['data']:
        try:
            result.append(stock['bond_id'])
        except (KeyError, ValueError):
            # 如果数据缺失或格式错误，跳过该股票
            continue

    for stock in delisted_object['data']:
        try:
            result.append(stock['bond_id'])
        except (KeyError, ValueError):
            # 如果数据缺失或格式错误，跳过该股票
            continue
    return result

def fetch_daily_kline(stock_code):
    """
    通过新浪财经API获取可转债日K线数据

    参数:
        stock_code (str): 可转债代码，如 '110059'（浦发转债）

    返回:
        DataFrame: 包含日K线数据（日期、开盘价、最高价、最低价、收盘价、成交量等）
    """
    # 判断市场（沪市 or 深市）
    if stock_code.startswith(('11')):
        symbol = f"sh{stock_code}"  # 沪市可转债
    elif stock_code.startswith(('12')):
        symbol = f"sz{stock_code}"  # 深市可转债
    else:
        return None

    # 新浪财经API（日K线数据）
    url = f"https://quotes.sina.cn/cn/api/json_v2.php/CN_MarketDataService.getKLineData?symbol={symbol}&scale=240&ma=5&datalen=1000"

    try:
        response = requests.get(url)
        response.raise_for_status()  # 检查请求是否成功
        data = response.json()

        if not data:
            print(f"未找到可转债 {stock_code} 的数据！")
            return None

        # 重命名列（新浪返回的字段名是中文）
        # column_map = {
        #     'open': '开盘价',
        #     'high': '最高价',
        #     'low': '最低价',
        #     'close': '收盘价',
        #     'volume': '成交量'
        # }

        return data

    except requests.exceptions.RequestException as e:
        print(f"请求失败: {e}")
        return stock_code
    except ValueError as e:
        print(f"数据解析失败: {e}")
        return None

def is_pin(daily_data, settlement):

    threshold = 11 / 100.0
    low = float(daily_data['low'])
    high = float(daily_data['high'])
    change_percent = (float(daily_data['close']) / float(settlement) - 1) * 100
    adv = (float(settlement) + float(daily_data['close'])) / 2

    return low > 0 and 10 > change_percent > -10 and (low < adv * (1 - threshold) or high > adv * (1 + threshold))


# session = get_jisilu_session()
# kzz_id = get_kzz_code_from_jisilu(session)
kzz_id= ['123080', '113601', '113068', '113609', '111019', '123082', '123052', '127047', '123241', '128082', '118028', '110060', '127035', '127110', '123174', '123209', '123248', '123186', '128109', '118023', '123156', '127106', '111011', '113629', '118016', '113549', '127055', '113065', '123235', '113669', '127081', '123239', '128074', '127053', '128144', '118051', '118057', '123161', '128071', '123243', '113058', '123056', '118004', '123213', '111012', '113690', '128081', '123211', '113631', '123141', '113062', '123245', '113042', '118030', '123063', '113030', '123198', '110059', '123221', '128076', '118012', '123160', '123048', '123120', '113696', '113663', '123203', '111013', '128122', '110096', '127076', '123187', '127079', '113615', '127092', '110077', '123038', '123087', '113651', '123059', '128105', '123089', '123222', '123249', '118013', '118041', '123206', '128120', '123236', '123201', '123177', '128141', '128130', '123237', '123200', '118049', '123246', '110063', '113649', '113052', '132026', '123147', '111023', '110074', '111007', '118050', '113542', '113039', '128133', '113656', '123242', '113606', '127028', '111017', '123220', '127101', '113056', '113687', '113668', '118048', '113069', '113640', '118021', '128132', '128116', '123169', '110093', '127109', '127084', '123178', '127020', '128131', '123049', '123031', '113577', '113667', '113686', '123244', '127095', '127077', '127105', '111005', '127078', '127094', '113565', '113569', '127082', '123085', '118045', '127019', '123247', '113689', '127033', '123145', '127096', '123231', '127104', '118043', '123131', '123207', '123188', '127037', '113681', '113664', '113672', '123251', '113064', '113657', '113632', '123157', '113677', '110097', '113694', '123054', '113033', '118039', '113641', '113047', '127086', '113685', '127039', '110062', '123162', '123129', '113628', '123217', '113676', '127015', '127097', '123146', '123166', '127052', '123118', '123225', '110094', '123173', '127099', '111018', '111016', '123119', '123112', '123107', '123149', '127093', '123076', '113654', '110067', '113683', '127061', '111020', '113646', '113574', '123240', '111015', '110070', '127026', '113688', '118008', '127070', '110084', '110098', '123061', '123234', '127072', '113678', '127045', '118006', '110082', '123092', '113691', '123199', '123182', '113605', '127018', '123189', '123223', '118054', '127040', '110095', '113070', '123257', '123212', '113066', '127049', '127054', '118014', '128129', '123215', '113588', '123230', '123128', '127050', '127075', '113043', '113621', '118044', '127041', '113692', '113658', '110064', '123224', '113674', '123168', '123185', '118003', '123183', '128095', '128101', '113597', '111003', '113037', '123130', '123232', '113666', '123126', '113053', '118038', '113661', '123193', '110075', '128142', '118056', '127107', '128127', '111022', '123091', '113051', '123214', '123088', '113563', '128128', '127069', '123159', '118037', '127027', '118029', '127016', '127103', '123253', '111021', '111002', '123133', '123176', '110090', '113647', '113675', '127059', '118035', '118036', '123255', '123196', '123250', '113046', '113693', '113067', '123192', '123254', '123172', '113618', '118055', '123252', '113584', '127102', '113643', '127071', '110081', '123150', '118053', '123195', '127108', '113625', '123233', '113054', '110073', '113665', '123064', '123114', '110089', '127064', '113639', '110092', '123194', '127031', '123155', '127083', '127024', '113648', '123158', '113593', '113634', '127042', '123210', '123229', '113045', '113680', '123175', '123080', '123216', '118052', '127088', '127060', '113673', '111000', '113695', '128125', '123121', '128097', '123197', '118025', '110086', '113545', '118009', '118011', '123034', '113644', '113627', '128137', '123071', '113659', '113616', '127034', '127066', '113682', '111004', '123113', '127068', '127017', '123171', '113623', '127022', '123138', '123142', '113652', '127030', '111010', '113671', '110087', '128138', '123039', '113679', '111014', '113048', '111001', '118031', '118040', '111009', '127038', '127098', '113610', '127062', '127073', '128136', '123256', '123165', '123090', '113653', '127090', '128119', '113636', '110076', '118015', '127080', '128121', '127085', '127067', '118007', '118033', '118024', '110085', '127056', '123117', '113049', '123104', '113660', '123124', '113638', '123108', '123151', '128108', '128134', '123144', '118027', '113670', '127046', '123179', '118000', '123180', '118018', '123122', '123109', '113579', '113655', '118005', '127044', '118034', '113650', '113624', '113633', '118032', '113059', '123154', '118042', '127025', '128135', '123072', '118010', '118022', '123065', '128124', '127089', '118020', '404003', '113575', '113589', '113050', '123093', '127043', '123204', '123184', '110079', '128070', '113598', '113561', '123218', '113637', '123099', '123078', '123132', '128117', '118046', '127051', '123228', '113582', '128066', '128072', '127091', '123190', '123152', '123226', '127087', '113534', '113684', '123100', '113024', '127014', '128062', '111008', '113532', '123227', '113608', '123025', '127100', '113530', '123191', '123067', '123022', '110055', '113061', '127032', '110052', '128143', '123127', '113021', '128056', '113546', '128053', '113044', '113055', '113527', '113526', '113576', '123163', '123238', '123035', '118026', '128083', '123103', '128063', '123202', '123018', '110058', '128118', '128090', '123219', '110068', '113537', '113596', '123101', '113524', '123135', '113662', '128106', '110048', '127074', '128091', '128087', '113573', '123143', '113619', '123044', '123205', '123050', '128049', '123115', '113060', '123096', '110047', '113600', '123170', '123208', '128048', '113519', '132020', '110083', '128044', '404002', '113602', '113516', '404001', '128042', '123013', '110072', '123012', '123153', '123011', '128041', '123010', '128123', '110091', '127007', '110044', '113027', '128039', '123106', '118019', '127063', '123167', '113566', '132018', '113594', '110088', '110045', '127058', '127065', '127012', '128085', '128037', '127006', '127005', '128036', '113505', '113504', '113595', '113063', '128035', '110061', '110043', '128034', '113535', '118017', '123164', '128033', '113591', '113017', '113604', '128030', '123004', '113057', '128026', '128025', '110080', '128023', '113578', '128021', '123002', '123181', '128075', '128111', '123140', '128017', '127029', '113626', '113025', '110053', '123046', '128140', '128100', '128079', '128114', '123015', '127036', '123075', '123014', '123098', '113013', '123136', '113016', '110057', '113585', '127004', '123148', '123116', '120002', '127021', '111006', '132022', '123077', '132014', '128078', '123083', '128014', '123057', '127057', '113570', '113622', '113011', '123134', '113567', '123105', '128145', '128040', '132015', '123060', '123125', '113525', '128029', '123123', '128022', '128069', '128015', '110056', '123139', '132021', '123110', '113642', '110038', '128046', '128073', '123027', '113635', '123137', '118001', '123023', '113502', '123062', '123097', '127048', '113620', '123045', '123086', '123084', '128139', '132011', '123073', '113548', '113630', '123070', '113599', '128013', '132009', '128107', '110071', '127013', '113541', '113568', '127003', '132008', '113550', '132017', '118002', '113036', '132016', '123024', '110066', '113026', '128093', '128103', '123111', '128096', '128094', '123042', '127011', '128113', '123043', '128050', '113034', '113009', '113536', '110034', '123053', '113607', '113528', '123081', '110051', '123074', '113614', '123028', '128057', '113603', '113580', '123102', '123069', '110041', '132004', '110033', '132007', '128018', '120003', '120004', '123047', '123051', '123068', '113014', '113572', '123030', '113612', '123079', '128051', '123094', '113012', '113508', '123033', '128064', '113509', '123066', '123007', '113040', '113611', '128032', '127023', '113543', '123058', '110065', '123029', '113559', '113041', '132006', '110031', '113564', '128126', '113557', '110069', '113038', '128052', '113029', '113590', '113592', '128028', '127008', '113583', '128112', '128065', '128010', '123055', '128115', '123017', '128110', '113587', '113035', '113556', '113586', '113008', '113032', '113520', '128019', '128104', '128102', '113562', '123026', '113581', '123036', '132005', '113555', '113553', '123032', '113521', '113020', '128058', '132013', '128099', '113571', '128098', '128067', '128043', '113544', '113028', '128092', '113547', '123037', '113554', '128084', '110042', '132012', '113019', '123020', '113031', '113514', '128086', '128045', '113518', '123041', '113022', '128088', '123040', '128089', '113558', '128059', '113552', '128080', '113551', '128077', '128054', '113515', '113511', '113503', '128012', '113531', '123021', '110050', '128055', '113517', '128016', '123019', '113510', '113540', '110046', '123009', '128038', '110054', '123016', '113539', '128061', '113522', '113538', '128060', '123003', '113523', '128068', '128020', '113533', '110049', '110030', '113529', '113507', '128047', '127009', '123001', '128027', '127010', '113015', '128024', '110040', '113513', '120001', '132010', '113018', '123006', '123008', '113506', '113512', '110032', '113010', '132003', '132002', '123005', '110039', '132001', '128011', '128009', '110035', '113501', '113007', '110023', '128007', '128008', '126729', '125089', '110029', '128002', '128005', '110012', '113006', '110011', '110019', '110028', '128006', '110020', '113001', '110022', '110018', '110027', '113002', '110015', '110017', '127002', '113005', '110025', '128004', '110024', '113003', '128003', '128001', '110007', '110016', '125887', '110003', '129031', '125731', '110009']

# bond_zh_cov_df = ak.bond_zh_cov()
# print(bond_zh_cov_df)
result_data = []

for stock_code in kzz_id:
    kline_data = fetch_daily_kline(stock_code)
    while kline_data == stock_code:
        time.sleep(10)
        print(f"重新获取k线数据: {stock_code}")
        kline_data = fetch_daily_kline(stock_code)

    if kline_data is not None:
        settlement = 0
        for daily_data in kline_data:
            if settlement != 0 and is_pin(daily_data, settlement):
                daily_data['code'] = stock_code
                result_data.append(daily_data)
            settlement = daily_data['close']
if result_data is not None:
    print(result_data)
else:
    print("未能获取可转债插针数据")

